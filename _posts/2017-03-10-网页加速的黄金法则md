---
layout: post
title:  "网页加速的黄金法则"
crawlertitle: "herman - 网页加速的黄金法则"
categories: posts
tags: '性能优化'
author: shdong
---

过去，落后的网络技术是内容提供者在移动端上提供内容的速度瓶颈。随着移动互联网技术的不断发展，用户对速度的需求也越来越高。同时，用户环境复杂、终端众多，内容平台、浏览器、运营商、站点都在致力于提高网页速度，越来越多的开发者意识到速度对于一个网站的巨大提升作用。目前前端层面的速度提升主要集中在**网络**和**渲染**两个层面着手。

### 移动互联网下的网页提速需求
- 移动设备使用频率最高，移动web使用频率最高；用户环境复杂、终端众多，内容平台、浏览器、运营商、站点都在致力于提高网页速度。
- 移动网页速度瓶颈：**网络**、**渲染**；
- 解决方案：**CDN**、**页面渲染优化**

### 网页加速的通常做法

#### 使用 CDN
提高内容下载速度是最显而易见的加速手段，而通常而言，使用 CDN（Content Delivery Network，内容分发网络）将内容通过离访客尽量近的节点提供，能十分显著的加快下载速度，从而提高网页打开速度。

由于边际成本作用，对于中小型站点，自行搭建 CDN 显然是一件花费巨大而收效甚微的事情；而更合理的方式是选择使用现有的 CDN 服务。例如，CloudFlare 和百度云加速是国际和国内最为著名的两家 CDN 服务提供商，而它们甚至提供免费的 CDN 服务。此外，你还可以选择 Amazon CloudFront、又拍、七牛等 CDN 服务。

通过 CDN 服务，你的内容得以利用尽量大的用户带宽，得以快速地到达用户的终端上。在启用 CDN 前，内容是从 Web 服务器直接发送到用户终端上。而使用了 CDN 之后，Web 服务器预先将资源缓存到分布全球的 CDN 服务器，然后在用户访问时，再从 CDN 服务器下载内容。

#### 降低传输体积

网页的加载时间等于速度乘以体积，倘若下载速度已经到达瓶颈，降低传输体积亦是十分有效的提速手段。而降低传输体积有数种手段，一般使用以下方法：

##### 使用传输压缩算法

在 HTTP 协议中，浏览器在向服务器请求数据时，会使用 `Accept-Encoding` 声明自己可以解析的传输压缩算法。这些压缩算法包括 gzip、br、zlib 等，其中 gzip 在各浏览器中被广泛使用。例如，对于流行的 nginx 服务器软件，只需要在 http 配置块中设置 `gzip on;` ，即可使得其支持这种压缩算法。

若正确配置了 gzip，你将可以在响应头中看到：`Content-Encoding: gzip` 的字样，同时该文件传输的数据量大大减小。对于 JavaScript 或者 CSS 资源，压缩率通常可达到 50%，十分可观。

##### 使用被合适压缩的图片

为图片选择合适的压缩算法，可以有效的降低体积。特别地，在现代浏览器下得到支持的新图片格式通常能为你在相同画质下提供更小的体积。表 6-image-compress 显示了不同压缩算法的特性，你可以根据需要选择合适的压缩算法。例如，若不需要透明度通道，可以选择尺寸更小的有损压缩算法 JPEG；又例如你需要使用动画，那么 WebP 可能是 GIF 的一个可选替代。

表 6-image-compress 不同压缩算法的对比

| 压缩算法    | 损失质量 | 支持动画 | 透明度通道 | 文件尺寸 | 兼容性  |
| ------- | ---- | ---- | ----- | ---- | ---- |
| JPEG    | 是    | 否    | 无     | 小    | 好    |
| GIF     | 是    | 是    | 仅透明色  | 中    | 好    |
| PNG     | 否    | 否    | 有     | 大    | 好    |
| APNG    | 否    | 是    | 有     | 大    | 差    |
| 有损 WebP | 是    | 是    | 有     | 极小   | 极差   |
| 无损 WebP | 否    | 是    | 有     | 小    | 极差   |

APNG 仅被现代的 Firefox、Chrome 59+、Safari 和 Opera 支持，而 WebP 格式则仅被 Chrome 和 Opera 支持。你可以访问 https://caniuse.com/ 并在搜索框中输入 “APNG” 或 “WebP” 来查看最新的浏览器支持率数据。

##### 使用压缩过的源代码

HTML、CSS 和 JavaScript 都可以使用大量成熟的方案来进行压缩，部分 CDN 提供商甚至内建了这些功能。例如，使用被广泛使用的开源工具 UglifyJS 或 Google 发布的 Closure Compiler 在发布之前处理你的 JavaScript 文件，可以使得其体积显著减小。

压缩源代码会使得代码变得不可读，这也能一定程度上保护你的知识产权，但可能对你的调试带来麻烦。为此，压缩工具通常会生成“源代码地图”（.map 文件），将它加载到浏览器中后，浏览器就能将压缩的代码映射到你的源代码中。

#### 使用缓存

若你的用户喜欢你的网站并且时常回来看，或是用户喜欢在你的内容之间跳转，那么缓存技术是你一定要考虑使用的性能杀手锏。缓存使得浏览器能够将资源下载到本地，并在下次访问时直接使用这份副本，以避免多余的网络请求。

另一方面，缓存可能导致用户无法看到最新的网页内容，故设置缓存时，也需要关注缓存有效性。通常而言，使用 `Cache-Control` 、`Etag` 和唯一网址中的任意一种均可以控制缓存的有效性，在此不再展开赘述。

#### 正确加载外部文件

作为 Web 标准，若你在 HTML 中插入了 `<script>` 标签，浏览器会阻塞 DOM 渲染而等待 JavaScript 运行。在该标签上增加 `async` 属性，可以使其不阻塞 DOM 渲染并将其延迟到下载之后再执行——但这对传统的网站而言，修改脚本的执行时机可能使得其不能正常工作，需要针对其进行修改。若无法使用 `async` 属性，也可以考虑将其放在网页底部，使其尽量不阻塞网页渲染。

若你的网页含有大量的图片，推荐的做法是使用懒加载（lazy-load）技术。懒加载是在 HTML 渲染解析中过程中不加载任何资源，然后通过 JavaScript 监听滚动事件在用户浏览过程中加载图片的技术。在 html 中使用大量图片，会导致浏览器发起大量请求，影响并发性能的同时阻塞用户带宽，使得重要内容难以被迅速加载。若使用懒加载技术，在用户浏览时才开始请求图片，则会大大降低页面加载所花时间。

虽然异步下载能提升下载性能，但 CSS 会影响 DOM 渲染的方式。由于异步加载 CSS 不仅会带来页面跳动，更会导致页面重绘使得性能严重下降，所以 CSS 需要在网页头部的最前端声明，以尽早地下载、解析。

#### 优化 JavaScript 性能

现代网页中 JavaScript 必不可少，使用高性能的 JavaScript 脚本也是提升性能的重要环节。例如，尽量避免大量使用会导致页面重绘、回流的 DOM 操作，或是使用缓存避免频繁访问 DOM，在此不再赘述。

诚然，移动网页加速是一门十分复杂的学问，笔者在此列出的数种常见方法虽只是其中一部分，但也可管中窥豹。读者若对此话题感兴趣，亦可参考其它资料进行深入学习。



这里主要总结一些我找到的网页性能优化的方法和途径，之后我还会具体对每个方法进行单独分析实践。

提升性能的实践过程中少不了对于性能的分析，请看下一篇文章：性能分析的一般方法。(待发布)



参考资料：《MIP开发指南草稿》